
Rosmsater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e4  080017e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080017e4  080017e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017e4  080017e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e4  080017e4  000117e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080017ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  0800185c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800185c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004066  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001723  00000000  00000000  000240ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f8  00000000  00000000  00025828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000430  00000000  00000000  00025d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199de  00000000  00000000  00026150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006264  00000000  00000000  0003fb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9c3  00000000  00000000  00045d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012f0  00000000  00000000  000d07a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	0800178c 	.word	0x0800178c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	0800178c 	.word	0x0800178c

08000224 <_ZN4key1C1Ev>:


static uint16_t key_count = 0;

/* 检测按钮是否按下，如果按下，转换state */
key1::key1() {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <_ZN4key1C1Ev+0x1c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4618      	mov	r0, r3
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	080017bc 	.word	0x080017bc

08000244 <_ZN4key1D1Ev>:
key1::~key1() {
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	4a04      	ldr	r2, [pc, #16]	; (8000260 <_ZN4key1D1Ev+0x1c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4618      	mov	r0, r3
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	080017bc 	.word	0x080017bc

08000264 <_ZN4key1D0Ev>:
key1::~key1() {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
}
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f7ff ffe9 	bl	8000244 <_ZN4key1D1Ev>
 8000272:	2108      	movs	r1, #8
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f001 f9fb 	bl	8001670 <_ZdlPvj>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4618      	mov	r0, r3
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <_ZN4key114Key_is_pressedEv>:
	}
	return s;
}

uint8_t key1::Key_is_pressed()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 800028c:	2104      	movs	r1, #4
 800028e:	4809      	ldr	r0, [pc, #36]	; (80002b4 <_ZN4key114Key_is_pressedEv+0x30>)
 8000290:	f000 fdbe 	bl	8000e10 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	bf0c      	ite	eq
 800029a:	2301      	moveq	r3, #1
 800029c:	2300      	movne	r3, #0
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <_ZN4key114Key_is_pressedEv+0x24>
		{
			return KEY_PRESSED; // 如果按键被按下，则返回KEY_PRESS
 80002a4:	2301      	movs	r3, #1
 80002a6:	e000      	b.n	80002aa <_ZN4key114Key_is_pressedEv+0x26>
		}
		return KEY_RELEASED;   // 如果按键是松开状态，则返回KEY_RELEASE
 80002a8:	2300      	movs	r3, #0

}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40011400 	.word	0x40011400

080002b8 <_ZN4key110Key1_StateEh>:

uint8_t key1::Key1_State(uint8_t mode)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
	static uint16_t key1_state = 0;

	if (Key_is_pressed() == KEY_PRESSED)
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ffdd 	bl	8000284 <_ZN4key114Key_is_pressedEv>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d00e      	beq.n	80002f8 <_ZN4key110Key1_StateEh+0x40>
	{
		if (key1_state < (mode + 1) * 2)
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <_ZN4key110Key1_StateEh+0x68>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	3301      	adds	r3, #1
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	429a      	cmp	r2, r3
 80002e8:	da09      	bge.n	80002fe <_ZN4key110Key1_StateEh+0x46>
		{
			key1_state++;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <_ZN4key110Key1_StateEh+0x68>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	3301      	adds	r3, #1
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <_ZN4key110Key1_StateEh+0x68>)
 80002f4:	801a      	strh	r2, [r3, #0]
 80002f6:	e002      	b.n	80002fe <_ZN4key110Key1_StateEh+0x46>
		}
	}
	else
	{
		key1_state = 0;
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <_ZN4key110Key1_StateEh+0x68>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <_ZN4key110Key1_StateEh+0x68>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d107      	bne.n	8000316 <_ZN4key110Key1_StateEh+0x5e>
	{
		key_count ++;
 8000306:	4b07      	ldr	r3, [pc, #28]	; (8000324 <_ZN4key110Key1_StateEh+0x6c>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	3301      	adds	r3, #1
 800030c:	b29a      	uxth	r2, r3
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <_ZN4key110Key1_StateEh+0x6c>)
 8000310:	801a      	strh	r2, [r3, #0]
		return KEY_PRESSED;
 8000312:	2301      	movs	r3, #1
 8000314:	e000      	b.n	8000318 <_ZN4key110Key1_StateEh+0x60>
	}
	return KEY_RELEASED;
 8000316:	2300      	movs	r3, #0
}
 8000318:	4618      	mov	r0, r3
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	2000008e 	.word	0x2000008e
 8000324:	2000008c 	.word	0x2000008c

08000328 <_ZN3ledC1Ev>:
 */


#include "led.hpp"

led::led(){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]


}
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4618      	mov	r0, r3
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <_ZN3ledD1Ev>:

led::~led(){
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

}
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <_ZN3led17Led_status_handleEv>:
	{
		LED_ON();
	}
}
void led::Led_status_handle()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	static uint16_t count;
	count++;
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <_ZN3led17Led_status_handleEv+0x34>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <_ZN3led17Led_status_handleEv+0x34>)
 8000362:	801a      	strh	r2, [r3, #0]
	if(count > 10)
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <_ZN3led17Led_status_handleEv+0x34>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	2b0a      	cmp	r3, #10
 800036a:	d907      	bls.n	800037c <_ZN3led17Led_status_handleEv+0x2c>
	{
		count = 0;
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <_ZN3led17Led_status_handleEv+0x34>)
 800036e:	2200      	movs	r2, #0
 8000370:	801a      	strh	r2, [r3, #0]
		LED_TOGGLE();
 8000372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000376:	4804      	ldr	r0, [pc, #16]	; (8000388 <_ZN3led17Led_status_handleEv+0x38>)
 8000378:	f000 fd79 	bl	8000e6e <HAL_GPIO_TogglePin>
	}
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000090 	.word	0x20000090
 8000388:	40011000 	.word	0x40011000

0800038c <_ZN4beep14Beep_get_stateEv>:

	beep();
	beep(uint16_t time);
	virtual ~beep();

	uint8_t Beep_get_state(){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
		return beep_state;
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <_ZN4beep14Beep_get_stateEv+0x18>)
 8000396:	781b      	ldrb	r3, [r3, #0]
	}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000092 	.word	0x20000092

080003a8 <_ZN4beep14Beep_set_stateEh>:
	void Beep_set_state(uint8_t state){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
		beep_state = state;
 80003b4:	4a03      	ldr	r2, [pc, #12]	; (80003c4 <_ZN4beep14Beep_set_stateEh+0x1c>)
 80003b6:	78fb      	ldrb	r3, [r7, #3]
 80003b8:	7013      	strb	r3, [r2, #0]
	}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	20000092 	.word	0x20000092

080003c8 <_ZN4beep13Beep_set_timeEt>:
	uint16_t Beep_get_time(){
		return beep_on_time;
	}
	void Beep_set_time(uint16_t time){
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	807b      	strh	r3, [r7, #2]
		beep_on_time = time;
 80003d4:	4a03      	ldr	r2, [pc, #12]	; (80003e4 <_ZN4beep13Beep_set_timeEt+0x1c>)
 80003d6:	887b      	ldrh	r3, [r7, #2]
 80003d8:	8013      	strh	r3, [r2, #0]
	}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	20000094 	.word	0x20000094

080003e8 <_ZN4beepC1Ev>:
 */

#include "beep.hpp"


beep::beep() {
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <_ZN4beepC1Ev+0x1c>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	080017cc 	.word	0x080017cc

08000408 <_ZN4beepD1Ev>:

beep::~beep() {
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <_ZN4beepD1Ev+0x1c>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4618      	mov	r0, r3
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	080017cc 	.word	0x080017cc

08000428 <_ZN4beepD0Ev>:
beep::~beep() {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
}
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ffe9 	bl	8000408 <_ZN4beepD1Ev>
 8000436:	2104      	movs	r1, #4
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f001 f919 	bl	8001670 <_ZdlPvj>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4618      	mov	r0, r3
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <_ZN4beep12Beep_on_timeEt>:
				Beep_set_time(t / 10);
				BEEP_ON();
			}
}
/* 设置延时时间 */
void beep::Beep_on_time(uint16_t time){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	807b      	strh	r3, [r7, #2]

		if(time == 0){
 8000454:	887b      	ldrh	r3, [r7, #2]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d10c      	bne.n	8000474 <_ZN4beep12Beep_on_timeEt+0x2c>
			Beep_set_state(beep_state_off);
 800045a:	2100      	movs	r1, #0
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f7ff ffa3 	bl	80003a8 <_ZN4beep14Beep_set_stateEh>
			Beep_set_time(0);
 8000462:	2100      	movs	r1, #0
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff ffaf 	bl	80003c8 <_ZN4beep13Beep_set_timeEt>
			BEEP_OFF();
 800046a:	2200      	movs	r2, #0
 800046c:	2120      	movs	r1, #32
 800046e:	4816      	ldr	r0, [pc, #88]	; (80004c8 <_ZN4beep12Beep_on_timeEt+0x80>)
 8000470:	f000 fce5 	bl	8000e3e <HAL_GPIO_WritePin>

		}
		if(time == 1){
 8000474:	887b      	ldrh	r3, [r7, #2]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d10c      	bne.n	8000494 <_ZN4beep12Beep_on_timeEt+0x4c>
			Beep_set_state(beep_state_on);
 800047a:	2101      	movs	r1, #1
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f7ff ff93 	bl	80003a8 <_ZN4beep14Beep_set_stateEh>
			Beep_set_time(0);
 8000482:	2100      	movs	r1, #0
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f7ff ff9f 	bl	80003c8 <_ZN4beep13Beep_set_timeEt>
			BEEP_ON();
 800048a:	2201      	movs	r2, #1
 800048c:	2120      	movs	r1, #32
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <_ZN4beep12Beep_on_timeEt+0x80>)
 8000490:	f000 fcd5 	bl	8000e3e <HAL_GPIO_WritePin>

		}
		if(time > 10){
 8000494:	887b      	ldrh	r3, [r7, #2]
 8000496:	2b0a      	cmp	r3, #10
 8000498:	d912      	bls.n	80004c0 <_ZN4beep12Beep_on_timeEt+0x78>
			Beep_set_state(beep_state_delay);
 800049a:	2102      	movs	r1, #2
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff ff83 	bl	80003a8 <_ZN4beep14Beep_set_stateEh>
			Beep_set_time(time / 10);
 80004a2:	887b      	ldrh	r3, [r7, #2]
 80004a4:	4a09      	ldr	r2, [pc, #36]	; (80004cc <_ZN4beep12Beep_on_timeEt+0x84>)
 80004a6:	fba2 2303 	umull	r2, r3, r2, r3
 80004aa:	08db      	lsrs	r3, r3, #3
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4619      	mov	r1, r3
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff ff89 	bl	80003c8 <_ZN4beep13Beep_set_timeEt>
			BEEP_ON();
 80004b6:	2201      	movs	r2, #1
 80004b8:	2120      	movs	r1, #32
 80004ba:	4803      	ldr	r0, [pc, #12]	; (80004c8 <_ZN4beep12Beep_on_timeEt+0x80>)
 80004bc:	f000 fcbf 	bl	8000e3e <HAL_GPIO_WritePin>

		}
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40011000 	.word	0x40011000
 80004cc:	cccccccd 	.word	0xcccccccd

080004d0 <_ZN4beep25Beep_timeout_close_handleEv>:

/* 超时自动关闭。每10ms一次 */
void beep::Beep_timeout_close_handle(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if(Beep_get_state() == beep_state_delay)
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff57 	bl	800038c <_ZN4beep14Beep_get_stateEv>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	bf0c      	ite	eq
 80004e4:	2301      	moveq	r3, #1
 80004e6:	2300      	movne	r3, #0
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d013      	beq.n	8000516 <_ZN4beep25Beep_timeout_close_handleEv+0x46>
	{
		if(beep_on_time == 0)
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <_ZN4beep25Beep_timeout_close_handleEv+0x50>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d109      	bne.n	800050a <_ZN4beep25Beep_timeout_close_handleEv+0x3a>
		{
			Beep_set_state(beep_state_off);
 80004f6:	2100      	movs	r1, #0
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff ff55 	bl	80003a8 <_ZN4beep14Beep_set_stateEh>
			BEEP_OFF();
 80004fe:	2200      	movs	r2, #0
 8000500:	2120      	movs	r1, #32
 8000502:	4808      	ldr	r0, [pc, #32]	; (8000524 <_ZN4beep25Beep_timeout_close_handleEv+0x54>)
 8000504:	f000 fc9b 	bl	8000e3e <HAL_GPIO_WritePin>
	}
//	if (beep_state - 1 == (HAL_GetTick()%beep_on_time == 0)){
//					Beep_set_state(beep_state_off);
//					BEEP_OFF();
//	}
}
 8000508:	e005      	b.n	8000516 <_ZN4beep25Beep_timeout_close_handleEv+0x46>
			beep_on_time--;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <_ZN4beep25Beep_timeout_close_handleEv+0x50>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	3b01      	subs	r3, #1
 8000510:	b29a      	uxth	r2, r3
 8000512:	4b03      	ldr	r3, [pc, #12]	; (8000520 <_ZN4beep25Beep_timeout_close_handleEv+0x50>)
 8000514:	801a      	strh	r2, [r3, #0]
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000094 	.word	0x20000094
 8000524:	40011000 	.word	0x40011000

08000528 <bsp_loop>:
void set_time(uint8_t time){
	beep beep(time);
}

void bsp_loop()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
	key1 key;
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe76 	bl	8000224 <_ZN4key1C1Ev>
	beep beep;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ff54 	bl	80003e8 <_ZN4beepC1Ev>
	led led;
 8000540:	463b      	mov	r3, r7
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fef0 	bl	8000328 <_ZN3ledC1Ev>



	if(key.Key1_State(1)){
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff feb2 	bl	80002b8 <_ZN4key110Key1_StateEh>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <bsp_loop+0x48>
		beep.Beep_on_time(500);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ff6c 	bl	8000448 <_ZN4beep12Beep_on_timeEt>
//		if(key.Key_toggle_state(GET_STATE)){
//			LED_TOGGLE();
//		}
	}
	beep.Beep_timeout_close_handle();
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffac 	bl	80004d0 <_ZN4beep25Beep_timeout_close_handleEv>
	led.Led_status_handle();
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fee8 	bl	8000350 <_ZN3led17Led_status_handleEv>
	HAL_Delay(10);
 8000580:	200a      	movs	r0, #10
 8000582:	f000 f9a9 	bl	80008d8 <HAL_Delay>
	led led;
 8000586:	463b      	mov	r3, r7
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff fed7 	bl	800033c <_ZN3ledD1Ev>
	beep beep;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff39 	bl	8000408 <_ZN4beepD1Ev>
	key1 key;
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe52 	bl	8000244 <_ZN4key1D1Ev>
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 f932 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f805 	bl	80005be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f848 	bl	8000648 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bsp_loop();
 80005b8:	f7ff ffb6 	bl	8000528 <bsp_loop>
 80005bc:	e7fc      	b.n	80005b8 <main+0x10>

080005be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b090      	sub	sp, #64	; 0x40
 80005c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c4:	f107 0318 	add.w	r3, r7, #24
 80005c8:	2228      	movs	r2, #40	; 0x28
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f87f 	bl	80016d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	2301      	movs	r3, #1
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fc4a 	bl	8000ea0 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000612:	f000 f873 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2102      	movs	r1, #2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 feb7 	bl	80013a4 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800063c:	f000 f85e 	bl	80006fc <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3740      	adds	r7, #64	; 0x40
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xa8>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0310 	and.w	r3, r3, #16
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_GPIO_Init+0xa8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0xa8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0320 	and.w	r3, r3, #32
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xa8>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0xa8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BEEP_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f242 0120 	movw	r1, #8224	; 0x2020
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <MX_GPIO_Init+0xac>)
 80006ac:	f000 fbc7 	bl	8000e3e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BEEP_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BEEP_Pin;
 80006b0:	f242 0320 	movw	r3, #8224	; 0x2020
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2302      	movs	r3, #2
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <MX_GPIO_Init+0xac>)
 80006ca:	f000 fa0d 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80006ce:	2304      	movs	r3, #4
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_GPIO_Init+0xb0>)
 80006e2:	f000 fa01 	bl	8000ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e6:	bf00      	nop
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40011000 	.word	0x40011000
 80006f8:	40011400 	.word	0x40011400

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_MspInit+0x5c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <HAL_MspInit+0x5c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_MspInit+0x5c>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x5c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_MspInit+0x5c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_MspInit+0x5c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_MspInit+0x60>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_MspInit+0x60>)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000
 8000768:	40010000 	.word	0x40010000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f875 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}

080007ba <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	; (8000800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <LoopFillZerobss+0x22>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ee:	f7ff ffe4 	bl	80007ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f000 ff41 	bl	8001678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fed7 	bl	80005a8 <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000804:	080017ec 	.word	0x080017ec
  ldr r2, =_sbss
 8000808:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800080c:	200000a4 	.word	0x200000a4

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f92b 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	200f      	movs	r0, #15
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff ff6a 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f935 	bl	8000ace <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f90b 	bl	8000a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000008 	.word	0x20000008
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000098 	.word	0x20000098

080008c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000098 	.word	0x20000098

080008d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e0:	f7ff fff0 	bl	80008c4 <HAL_GetTick>
 80008e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d005      	beq.n	80008fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Delay+0x44>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008fe:	bf00      	nop
 8000900:	f7ff ffe0 	bl	80008c4 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f7      	bhi.n	8000900 <HAL_Delay+0x28>
  {
  }
}
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff ff90 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff49 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff5e 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ff90 	bl	80009d8 <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff5f 	bl	8000984 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffb0 	bl	8000a3c <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b08b      	sub	sp, #44	; 0x2c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	e179      	b.n	8000df0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000afc:	2201      	movs	r2, #1
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	f040 8168 	bne.w	8000dea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a96      	ldr	r2, [pc, #600]	; (8000d78 <HAL_GPIO_Init+0x290>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d05e      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b24:	4a94      	ldr	r2, [pc, #592]	; (8000d78 <HAL_GPIO_Init+0x290>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d875      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b2a:	4a94      	ldr	r2, [pc, #592]	; (8000d7c <HAL_GPIO_Init+0x294>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d058      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b30:	4a92      	ldr	r2, [pc, #584]	; (8000d7c <HAL_GPIO_Init+0x294>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d86f      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b36:	4a92      	ldr	r2, [pc, #584]	; (8000d80 <HAL_GPIO_Init+0x298>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d052      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b3c:	4a90      	ldr	r2, [pc, #576]	; (8000d80 <HAL_GPIO_Init+0x298>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d869      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b42:	4a90      	ldr	r2, [pc, #576]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d04c      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b48:	4a8e      	ldr	r2, [pc, #568]	; (8000d84 <HAL_GPIO_Init+0x29c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d863      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b4e:	4a8e      	ldr	r2, [pc, #568]	; (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d046      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b54:	4a8c      	ldr	r2, [pc, #560]	; (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d85d      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d82a      	bhi.n	8000bb4 <HAL_GPIO_Init+0xcc>
 8000b5e:	2b12      	cmp	r3, #18
 8000b60:	d859      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b62:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <HAL_GPIO_Init+0x80>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000be3 	.word	0x08000be3
 8000b6c:	08000bbd 	.word	0x08000bbd
 8000b70:	08000bcf 	.word	0x08000bcf
 8000b74:	08000c11 	.word	0x08000c11
 8000b78:	08000c17 	.word	0x08000c17
 8000b7c:	08000c17 	.word	0x08000c17
 8000b80:	08000c17 	.word	0x08000c17
 8000b84:	08000c17 	.word	0x08000c17
 8000b88:	08000c17 	.word	0x08000c17
 8000b8c:	08000c17 	.word	0x08000c17
 8000b90:	08000c17 	.word	0x08000c17
 8000b94:	08000c17 	.word	0x08000c17
 8000b98:	08000c17 	.word	0x08000c17
 8000b9c:	08000c17 	.word	0x08000c17
 8000ba0:	08000c17 	.word	0x08000c17
 8000ba4:	08000c17 	.word	0x08000c17
 8000ba8:	08000c17 	.word	0x08000c17
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bd9 	.word	0x08000bd9
 8000bb4:	4a75      	ldr	r2, [pc, #468]	; (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bba:	e02c      	b.n	8000c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	623b      	str	r3, [r7, #32]
          break;
 8000bc2:	e029      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e024      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	623b      	str	r3, [r7, #32]
          break;
 8000bd6:	e01f      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	330c      	adds	r3, #12
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e01a      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d102      	bne.n	8000bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bea:	2304      	movs	r3, #4
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e013      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d105      	bne.n	8000c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69fa      	ldr	r2, [r7, #28]
 8000c00:	611a      	str	r2, [r3, #16]
          break;
 8000c02:	e009      	b.n	8000c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c04:	2308      	movs	r3, #8
 8000c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	615a      	str	r2, [r3, #20]
          break;
 8000c0e:	e003      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          break;
 8000c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	; 0xff
 8000c1c:	d801      	bhi.n	8000c22 <HAL_GPIO_Init+0x13a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	e001      	b.n	8000c26 <HAL_GPIO_Init+0x13e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3304      	adds	r3, #4
 8000c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2bff      	cmp	r3, #255	; 0xff
 8000c2c:	d802      	bhi.n	8000c34 <HAL_GPIO_Init+0x14c>
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x152>
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	3b08      	subs	r3, #8
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	210f      	movs	r1, #15
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	6a39      	ldr	r1, [r7, #32]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	431a      	orrs	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 80c1 	beq.w	8000dea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c68:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c80:	4a44      	ldr	r2, [pc, #272]	; (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3c      	ldr	r2, [pc, #240]	; (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d01f      	beq.n	8000cec <HAL_GPIO_Init+0x204>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3b      	ldr	r2, [pc, #236]	; (8000d9c <HAL_GPIO_Init+0x2b4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d019      	beq.n	8000ce8 <HAL_GPIO_Init+0x200>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3a      	ldr	r2, [pc, #232]	; (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d013      	beq.n	8000ce4 <HAL_GPIO_Init+0x1fc>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a39      	ldr	r2, [pc, #228]	; (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_GPIO_Init+0x1f8>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a38      	ldr	r2, [pc, #224]	; (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d007      	beq.n	8000cdc <HAL_GPIO_Init+0x1f4>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a37      	ldr	r2, [pc, #220]	; (8000dac <HAL_GPIO_Init+0x2c4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <HAL_GPIO_Init+0x1f0>
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e00a      	b.n	8000cee <HAL_GPIO_Init+0x206>
 8000cd8:	2306      	movs	r3, #6
 8000cda:	e008      	b.n	8000cee <HAL_GPIO_Init+0x206>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e006      	b.n	8000cee <HAL_GPIO_Init+0x206>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e004      	b.n	8000cee <HAL_GPIO_Init+0x206>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e002      	b.n	8000cee <HAL_GPIO_Init+0x206>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e000      	b.n	8000cee <HAL_GPIO_Init+0x206>
 8000cec:	2300      	movs	r3, #0
 8000cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf0:	f002 0203 	and.w	r2, r2, #3
 8000cf4:	0092      	lsls	r2, r2, #2
 8000cf6:	4093      	lsls	r3, r2
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cfe:	4925      	ldr	r1, [pc, #148]	; (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	089b      	lsrs	r3, r3, #2
 8000d04:	3302      	adds	r3, #2
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d006      	beq.n	8000d26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4924      	ldr	r1, [pc, #144]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	4920      	ldr	r1, [pc, #128]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	491a      	ldr	r1, [pc, #104]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	4916      	ldr	r1, [pc, #88]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d025      	beq.n	8000db4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	4910      	ldr	r1, [pc, #64]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
 8000d74:	e025      	b.n	8000dc2 <HAL_GPIO_Init+0x2da>
 8000d76:	bf00      	nop
 8000d78:	10320000 	.word	0x10320000
 8000d7c:	10310000 	.word	0x10310000
 8000d80:	10220000 	.word	0x10220000
 8000d84:	10210000 	.word	0x10210000
 8000d88:	10120000 	.word	0x10120000
 8000d8c:	10110000 	.word	0x10110000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	40011000 	.word	0x40011000
 8000da4:	40011400 	.word	0x40011400
 8000da8:	40011800 	.word	0x40011800
 8000dac:	40011c00 	.word	0x40011c00
 8000db0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_GPIO_Init+0x324>)
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4913      	ldr	r1, [pc, #76]	; (8000e0c <HAL_GPIO_Init+0x324>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_GPIO_Init+0x324>)
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <HAL_GPIO_Init+0x324>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60cb      	str	r3, [r1, #12]
 8000dda:	e006      	b.n	8000dea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_GPIO_Init+0x324>)
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	4909      	ldr	r1, [pc, #36]	; (8000e0c <HAL_GPIO_Init+0x324>)
 8000de6:	4013      	ands	r3, r2
 8000de8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	3301      	adds	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f47f ae7e 	bne.w	8000afc <HAL_GPIO_Init+0x14>
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	372c      	adds	r7, #44	; 0x2c
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40010400 	.word	0x40010400

08000e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e001      	b.n	8000e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e4e:	787b      	ldrb	r3, [r7, #1]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e54:	887a      	ldrh	r2, [r7, #2]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e5a:	e003      	b.n	8000e64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	041a      	lsls	r2, r3, #16
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	611a      	str	r2, [r3, #16]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e80:	887a      	ldrh	r2, [r7, #2]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4013      	ands	r3, r2
 8000e86:	041a      	lsls	r2, r3, #16
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	400b      	ands	r3, r1
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	611a      	str	r2, [r3, #16]
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e272      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 8087 	beq.w	8000fce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec0:	4b92      	ldr	r3, [pc, #584]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 030c 	and.w	r3, r3, #12
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d00c      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ecc:	4b8f      	ldr	r3, [pc, #572]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d112      	bne.n	8000efe <HAL_RCC_OscConfig+0x5e>
 8000ed8:	4b8c      	ldr	r3, [pc, #560]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee4:	d10b      	bne.n	8000efe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee6:	4b89      	ldr	r3, [pc, #548]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d06c      	beq.n	8000fcc <HAL_RCC_OscConfig+0x12c>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d168      	bne.n	8000fcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e24c      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f06:	d106      	bne.n	8000f16 <HAL_RCC_OscConfig+0x76>
 8000f08:	4b80      	ldr	r3, [pc, #512]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a7f      	ldr	r2, [pc, #508]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e02e      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x98>
 8000f1e:	4b7b      	ldr	r3, [pc, #492]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a7a      	ldr	r2, [pc, #488]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	4b78      	ldr	r3, [pc, #480]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a77      	ldr	r2, [pc, #476]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e01d      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0xbc>
 8000f42:	4b72      	ldr	r3, [pc, #456]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a71      	ldr	r2, [pc, #452]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b6f      	ldr	r3, [pc, #444]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a6e      	ldr	r2, [pc, #440]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e00b      	b.n	8000f74 <HAL_RCC_OscConfig+0xd4>
 8000f5c:	4b6b      	ldr	r3, [pc, #428]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a6a      	ldr	r2, [pc, #424]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b68      	ldr	r3, [pc, #416]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a67      	ldr	r2, [pc, #412]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fca2 	bl	80008c4 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fc9e 	bl	80008c4 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e200      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	4b5d      	ldr	r3, [pc, #372]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f0      	beq.n	8000f84 <HAL_RCC_OscConfig+0xe4>
 8000fa2:	e014      	b.n	8000fce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fc8e 	bl	80008c4 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fc8a 	bl	80008c4 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b64      	cmp	r3, #100	; 0x64
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e1ec      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	4b53      	ldr	r3, [pc, #332]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x10c>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d063      	beq.n	80010a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fda:	4b4c      	ldr	r3, [pc, #304]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00b      	beq.n	8000ffe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d11c      	bne.n	800102c <HAL_RCC_OscConfig+0x18c>
 8000ff2:	4b46      	ldr	r3, [pc, #280]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d116      	bne.n	800102c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <HAL_RCC_OscConfig+0x176>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d001      	beq.n	8001016 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e1c0      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4939      	ldr	r1, [pc, #228]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	e03a      	b.n	80010a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d020      	beq.n	8001076 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fc43 	bl	80008c4 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fc3f 	bl	80008c4 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e1a1      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4927      	ldr	r1, [pc, #156]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fc22 	bl	80008c4 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001084:	f7ff fc1e 	bl	80008c4 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e180      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d03a      	beq.n	8001124 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d019      	beq.n	80010ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc02 	bl	80008c4 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fbfe 	bl	80008c4 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e160      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 faa6 	bl	8001634 <RCC_Delay>
 80010e8:	e01c      	b.n	8001124 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f0:	f7ff fbe8 	bl	80008c4 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f6:	e00f      	b.n	8001118 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f8:	f7ff fbe4 	bl	80008c4 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d908      	bls.n	8001118 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e146      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	42420000 	.word	0x42420000
 8001114:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001118:	4b92      	ldr	r3, [pc, #584]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e9      	bne.n	80010f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a6 	beq.w	800127e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001136:	4b8b      	ldr	r3, [pc, #556]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10d      	bne.n	800115e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b88      	ldr	r3, [pc, #544]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a87      	ldr	r2, [pc, #540]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b85      	ldr	r3, [pc, #532]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800115a:	2301      	movs	r3, #1
 800115c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	4b82      	ldr	r3, [pc, #520]	; (8001368 <HAL_RCC_OscConfig+0x4c8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001166:	2b00      	cmp	r3, #0
 8001168:	d118      	bne.n	800119c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116a:	4b7f      	ldr	r3, [pc, #508]	; (8001368 <HAL_RCC_OscConfig+0x4c8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a7e      	ldr	r2, [pc, #504]	; (8001368 <HAL_RCC_OscConfig+0x4c8>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001176:	f7ff fba5 	bl	80008c4 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117e:	f7ff fba1 	bl	80008c4 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b64      	cmp	r3, #100	; 0x64
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e103      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001190:	4b75      	ldr	r3, [pc, #468]	; (8001368 <HAL_RCC_OscConfig+0x4c8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x312>
 80011a4:	4b6f      	ldr	r3, [pc, #444]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4a6e      	ldr	r2, [pc, #440]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6213      	str	r3, [r2, #32]
 80011b0:	e02d      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x334>
 80011ba:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a69      	ldr	r2, [pc, #420]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a66      	ldr	r2, [pc, #408]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f023 0304 	bic.w	r3, r3, #4
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	e01c      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d10c      	bne.n	80011f6 <HAL_RCC_OscConfig+0x356>
 80011dc:	4b61      	ldr	r3, [pc, #388]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a60      	ldr	r2, [pc, #384]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6213      	str	r3, [r2, #32]
 80011e8:	4b5e      	ldr	r3, [pc, #376]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4a5d      	ldr	r2, [pc, #372]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6213      	str	r3, [r2, #32]
 80011f4:	e00b      	b.n	800120e <HAL_RCC_OscConfig+0x36e>
 80011f6:	4b5b      	ldr	r3, [pc, #364]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a5a      	ldr	r2, [pc, #360]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	6213      	str	r3, [r2, #32]
 8001202:	4b58      	ldr	r3, [pc, #352]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a57      	ldr	r2, [pc, #348]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d015      	beq.n	8001242 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fb55 	bl	80008c4 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff fb51 	bl	80008c4 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e0b1      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ee      	beq.n	800121e <HAL_RCC_OscConfig+0x37e>
 8001240:	e014      	b.n	800126c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fb3f 	bl	80008c4 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fb3b 	bl	80008c4 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	; 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e09b      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001260:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ee      	bne.n	800124a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d105      	bne.n	800127e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a3b      	ldr	r2, [pc, #236]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8087 	beq.w	8001396 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001288:	4b36      	ldr	r3, [pc, #216]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b08      	cmp	r3, #8
 8001292:	d061      	beq.n	8001358 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d146      	bne.n	800132a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129c:	4b33      	ldr	r3, [pc, #204]	; (800136c <HAL_RCC_OscConfig+0x4cc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fb0f 	bl	80008c4 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fb0b 	bl	80008c4 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e06d      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d108      	bne.n	80012e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	4921      	ldr	r1, [pc, #132]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a19      	ldr	r1, [r3, #32]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	430b      	orrs	r3, r1
 80012f6:	491b      	ldr	r1, [pc, #108]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_RCC_OscConfig+0x4cc>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fadf 	bl	80008c4 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fadb 	bl	80008c4 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e03d      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x46a>
 8001328:	e035      	b.n	8001396 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_RCC_OscConfig+0x4cc>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fac8 	bl	80008c4 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001338:	f7ff fac4 	bl	80008c4 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e026      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x498>
 8001356:	e01e      	b.n	8001396 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e019      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
 8001364:	40021000 	.word	0x40021000
 8001368:	40007000 	.word	0x40007000
 800136c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_RCC_OscConfig+0x500>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	429a      	cmp	r2, r3
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138e:	429a      	cmp	r2, r3
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0d0      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b8:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d910      	bls.n	80013e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b67      	ldr	r3, [pc, #412]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4965      	ldr	r1, [pc, #404]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b63      	ldr	r3, [pc, #396]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0b8      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a58      	ldr	r2, [pc, #352]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800140a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001418:	4b53      	ldr	r3, [pc, #332]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a52      	ldr	r2, [pc, #328]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001422:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001424:	4b50      	ldr	r3, [pc, #320]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	494d      	ldr	r1, [pc, #308]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d040      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d115      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e07f      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e073      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06b      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f023 0203 	bic.w	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4936      	ldr	r1, [pc, #216]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001494:	f7ff fa16 	bl	80008c4 <HAL_GetTick>
 8001498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149c:	f7ff fa12 	bl	80008c4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e053      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 020c 	and.w	r2, r3, #12
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1eb      	bne.n	800149c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d210      	bcs.n	80014f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 0207 	bic.w	r2, r3, #7
 80014da:	4922      	ldr	r1, [pc, #136]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e032      	b.n	800155a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4916      	ldr	r1, [pc, #88]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	490e      	ldr	r1, [pc, #56]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001532:	f000 f821 	bl	8001578 <HAL_RCC_GetSysClockFreq>
 8001536:	4602      	mov	r2, r0
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	490a      	ldr	r1, [pc, #40]	; (800156c <HAL_RCC_ClockConfig+0x1c8>)
 8001544:	5ccb      	ldrb	r3, [r1, r3]
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <HAL_RCC_ClockConfig+0x1cc>)
 800154c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_RCC_ClockConfig+0x1d0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f974 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40022000 	.word	0x40022000
 8001568:	40021000 	.word	0x40021000
 800156c:	080017d4 	.word	0x080017d4
 8001570:	20000000 	.word	0x20000000
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001578:	b490      	push	{r4, r7}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_GetSysClockFreq+0xac>)
 8001580:	1d3c      	adds	r4, r7, #4
 8001582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001588:	f240 2301 	movw	r3, #513	; 0x201
 800158c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d002      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x40>
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d003      	beq.n	80015be <HAL_RCC_GetSysClockFreq+0x46>
 80015b6:	e02b      	b.n	8001610 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ba:	623b      	str	r3, [r7, #32]
      break;
 80015bc:	e02b      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	0c9b      	lsrs	r3, r3, #18
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3328      	adds	r3, #40	; 0x28
 80015c8:	443b      	add	r3, r7
 80015ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	0c5b      	lsrs	r3, r3, #17
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	3328      	adds	r3, #40	; 0x28
 80015e6:	443b      	add	r3, r7
 80015e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015f2:	fb03 f202 	mul.w	r2, r3, r2
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
 80015fe:	e004      	b.n	800160a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	623b      	str	r3, [r7, #32]
      break;
 800160e:	e002      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001612:	623b      	str	r3, [r7, #32]
      break;
 8001614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001616:	6a3b      	ldr	r3, [r7, #32]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bc90      	pop	{r4, r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	080017a4 	.word	0x080017a4
 8001628:	40021000 	.word	0x40021000
 800162c:	007a1200 	.word	0x007a1200
 8001630:	003d0900 	.word	0x003d0900

08001634 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <RCC_Delay+0x34>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <RCC_Delay+0x38>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0a5b      	lsrs	r3, r3, #9
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001650:	bf00      	nop
  }
  while (Delay --);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1e5a      	subs	r2, r3, #1
 8001656:	60fa      	str	r2, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f9      	bne.n	8001650 <RCC_Delay+0x1c>
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000000 	.word	0x20000000
 800166c:	10624dd3 	.word	0x10624dd3

08001670 <_ZdlPvj>:
 8001670:	f000 b800 	b.w	8001674 <_ZdlPv>

08001674 <_ZdlPv>:
 8001674:	f000 b824 	b.w	80016c0 <free>

08001678 <__libc_init_array>:
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	2600      	movs	r6, #0
 800167c:	4d0c      	ldr	r5, [pc, #48]	; (80016b0 <__libc_init_array+0x38>)
 800167e:	4c0d      	ldr	r4, [pc, #52]	; (80016b4 <__libc_init_array+0x3c>)
 8001680:	1b64      	subs	r4, r4, r5
 8001682:	10a4      	asrs	r4, r4, #2
 8001684:	42a6      	cmp	r6, r4
 8001686:	d109      	bne.n	800169c <__libc_init_array+0x24>
 8001688:	f000 f880 	bl	800178c <_init>
 800168c:	2600      	movs	r6, #0
 800168e:	4d0a      	ldr	r5, [pc, #40]	; (80016b8 <__libc_init_array+0x40>)
 8001690:	4c0a      	ldr	r4, [pc, #40]	; (80016bc <__libc_init_array+0x44>)
 8001692:	1b64      	subs	r4, r4, r5
 8001694:	10a4      	asrs	r4, r4, #2
 8001696:	42a6      	cmp	r6, r4
 8001698:	d105      	bne.n	80016a6 <__libc_init_array+0x2e>
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	f855 3b04 	ldr.w	r3, [r5], #4
 80016a0:	4798      	blx	r3
 80016a2:	3601      	adds	r6, #1
 80016a4:	e7ee      	b.n	8001684 <__libc_init_array+0xc>
 80016a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016aa:	4798      	blx	r3
 80016ac:	3601      	adds	r6, #1
 80016ae:	e7f2      	b.n	8001696 <__libc_init_array+0x1e>
 80016b0:	080017e4 	.word	0x080017e4
 80016b4:	080017e4 	.word	0x080017e4
 80016b8:	080017e4 	.word	0x080017e4
 80016bc:	080017e8 	.word	0x080017e8

080016c0 <free>:
 80016c0:	4b02      	ldr	r3, [pc, #8]	; (80016cc <free+0xc>)
 80016c2:	4601      	mov	r1, r0
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f000 b80b 	b.w	80016e0 <_free_r>
 80016ca:	bf00      	nop
 80016cc:	2000000c 	.word	0x2000000c

080016d0 <memset>:
 80016d0:	4603      	mov	r3, r0
 80016d2:	4402      	add	r2, r0
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d100      	bne.n	80016da <memset+0xa>
 80016d8:	4770      	bx	lr
 80016da:	f803 1b01 	strb.w	r1, [r3], #1
 80016de:	e7f9      	b.n	80016d4 <memset+0x4>

080016e0 <_free_r>:
 80016e0:	b538      	push	{r3, r4, r5, lr}
 80016e2:	4605      	mov	r5, r0
 80016e4:	2900      	cmp	r1, #0
 80016e6:	d040      	beq.n	800176a <_free_r+0x8a>
 80016e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016ec:	1f0c      	subs	r4, r1, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bfb8      	it	lt
 80016f2:	18e4      	addlt	r4, r4, r3
 80016f4:	f000 f83c 	bl	8001770 <__malloc_lock>
 80016f8:	4a1c      	ldr	r2, [pc, #112]	; (800176c <_free_r+0x8c>)
 80016fa:	6813      	ldr	r3, [r2, #0]
 80016fc:	b933      	cbnz	r3, 800170c <_free_r+0x2c>
 80016fe:	6063      	str	r3, [r4, #4]
 8001700:	6014      	str	r4, [r2, #0]
 8001702:	4628      	mov	r0, r5
 8001704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001708:	f000 b838 	b.w	800177c <__malloc_unlock>
 800170c:	42a3      	cmp	r3, r4
 800170e:	d908      	bls.n	8001722 <_free_r+0x42>
 8001710:	6820      	ldr	r0, [r4, #0]
 8001712:	1821      	adds	r1, r4, r0
 8001714:	428b      	cmp	r3, r1
 8001716:	bf01      	itttt	eq
 8001718:	6819      	ldreq	r1, [r3, #0]
 800171a:	685b      	ldreq	r3, [r3, #4]
 800171c:	1809      	addeq	r1, r1, r0
 800171e:	6021      	streq	r1, [r4, #0]
 8001720:	e7ed      	b.n	80016fe <_free_r+0x1e>
 8001722:	461a      	mov	r2, r3
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	b10b      	cbz	r3, 800172c <_free_r+0x4c>
 8001728:	42a3      	cmp	r3, r4
 800172a:	d9fa      	bls.n	8001722 <_free_r+0x42>
 800172c:	6811      	ldr	r1, [r2, #0]
 800172e:	1850      	adds	r0, r2, r1
 8001730:	42a0      	cmp	r0, r4
 8001732:	d10b      	bne.n	800174c <_free_r+0x6c>
 8001734:	6820      	ldr	r0, [r4, #0]
 8001736:	4401      	add	r1, r0
 8001738:	1850      	adds	r0, r2, r1
 800173a:	4283      	cmp	r3, r0
 800173c:	6011      	str	r1, [r2, #0]
 800173e:	d1e0      	bne.n	8001702 <_free_r+0x22>
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4401      	add	r1, r0
 8001746:	6011      	str	r1, [r2, #0]
 8001748:	6053      	str	r3, [r2, #4]
 800174a:	e7da      	b.n	8001702 <_free_r+0x22>
 800174c:	d902      	bls.n	8001754 <_free_r+0x74>
 800174e:	230c      	movs	r3, #12
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	e7d6      	b.n	8001702 <_free_r+0x22>
 8001754:	6820      	ldr	r0, [r4, #0]
 8001756:	1821      	adds	r1, r4, r0
 8001758:	428b      	cmp	r3, r1
 800175a:	bf01      	itttt	eq
 800175c:	6819      	ldreq	r1, [r3, #0]
 800175e:	685b      	ldreq	r3, [r3, #4]
 8001760:	1809      	addeq	r1, r1, r0
 8001762:	6021      	streq	r1, [r4, #0]
 8001764:	6063      	str	r3, [r4, #4]
 8001766:	6054      	str	r4, [r2, #4]
 8001768:	e7cb      	b.n	8001702 <_free_r+0x22>
 800176a:	bd38      	pop	{r3, r4, r5, pc}
 800176c:	2000009c 	.word	0x2000009c

08001770 <__malloc_lock>:
 8001770:	4801      	ldr	r0, [pc, #4]	; (8001778 <__malloc_lock+0x8>)
 8001772:	f000 b809 	b.w	8001788 <__retarget_lock_acquire_recursive>
 8001776:	bf00      	nop
 8001778:	200000a0 	.word	0x200000a0

0800177c <__malloc_unlock>:
 800177c:	4801      	ldr	r0, [pc, #4]	; (8001784 <__malloc_unlock+0x8>)
 800177e:	f000 b804 	b.w	800178a <__retarget_lock_release_recursive>
 8001782:	bf00      	nop
 8001784:	200000a0 	.word	0x200000a0

08001788 <__retarget_lock_acquire_recursive>:
 8001788:	4770      	bx	lr

0800178a <__retarget_lock_release_recursive>:
 800178a:	4770      	bx	lr

0800178c <_init>:
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	bf00      	nop
 8001790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001792:	bc08      	pop	{r3}
 8001794:	469e      	mov	lr, r3
 8001796:	4770      	bx	lr

08001798 <_fini>:
 8001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179a:	bf00      	nop
 800179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179e:	bc08      	pop	{r3}
 80017a0:	469e      	mov	lr, r3
 80017a2:	4770      	bx	lr
